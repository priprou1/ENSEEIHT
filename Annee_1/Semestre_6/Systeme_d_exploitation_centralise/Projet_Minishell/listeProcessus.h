/**
 * @file listeProcessus.h
 * @author Priscilia Gonthier
 * @brief Interface du module permettant de gérer la liste des processus en arrière plan du minishell.
 * @date 2022-05-25
 */

#ifndef LISTE_PROC
#define LISTE_PROC
#include <stdbool.h>
#include <stdlib.h>
#include <stdio.h>
#include <sys/types.h>

/*Enumération de l'état des processus*/
enum etat {SUSPENDU, ACTIF};
#pragma GCC diagnostic ignored "-Wunused-variable" //supprime le warning indiquant que etatString est non utilisé alors qu'il l'est dans listeProcessus.c
/*Tableau contenant les chaines de caractères de l'énumération pour l'affichage*/
static const char *etatString[] = {"SUSPENDU", "ACTIF"};

/*On définit un enregistrement qui contient les caractéristique d'un processus*/
struct processusArriere {
    int idMinishell;        // Identifiant propre au minishell du processus. 
    pid_t pid;              // PID du processus. 
    enum etat etat;         // Etat du processus.
    char commande[200];     // La commande lancée. 
};

typedef struct processusArriere *processusArriere;

//Fonctions utilisées.

/**
 * @brief Taille de la liste de processus.
 * 
 * @param listeProcessus Liste de processus dont on veut connaître la taille
 * @return int : Taille de la liste de processus 
 */
int taille(processusArriere *listeProcessus);

/**
 * @brief Retourne la position d'un processus d'une liste de processus à partir de son PID.
 * 
 * @param listeProcessus Liste de processus dans laquelle on cherche la position
 * @param pidProcessus PID du processus dont on veut la position
 * @return int : Poisition du processus
 */
int positionProcessus(processusArriere *listeProcessus, pid_t pidProcessus); 

/**
 * @brief Vérification si le processus appartient à une liste de processus.
 * 
 * @param listeProcessus Liste de processus dans laquelle on cherche à savoir si le processus est présent
 * @param pidProcessus PID du processus dont on veut savoir la présence
 * @return true : Le processus est dans la liste
 * @return false : Le processus n'est pas dans la liste
 */
bool processusEstInclu(processusArriere *listeProcessus, pid_t pidProcessus); 

/**
 * @brief Ajouter un processus à la liste.
 * 
 * @param listeProcessus Liste de processus dans laquelle on veut ajouter le processus
 * @param id ID du processus à ajouter
 * @param pid PID du processus à ajouter
 * @param commande Commande du processus à ajouter
 */
void ajouterProcessus(processusArriere *listeProcessus, int id , pid_t pid, char commande[200]);

/**
 * @brief Supprimer un processus de la liste
 * 
 * @param listeProcessus Liste de processus dans laquelle on veut supprimer le processus
 * @param pidProcessus PID du processus à supprimer
 */
void supprimerProcessus(processusArriere *listeProcessus, pid_t pidProcessus); 

/**
 * @brief Suspendre un processus de la liste des processus.
 * 
 * @param listeProcessus Liste de processus dans laquelle on veut suspendre le processus
 * @param pidProcessus PID du processus à suspendre
 */
void suspendreProcessus(processusArriere *listeProcessus, pid_t pidProcessus);

/**
 * @brief Reprendre un processus suspendu de la liste des processus.
 * 
 * @param listeProcessus Liste de processus dans laquelle on veut reprendre le processus
 * @param pidProcessus PID du processus à reprendre
 */
void reprendreProcessus(processusArriere *listeProcessus, pid_t pidProcessus);

/**
 * @brief Obtenir le PID d'un processus à partir de son identifiant minishell.
 * 
 * @param listeProcessus Liste de processus 
 * @param idProcessus Identifiant minishell du processus
 * @return pid_t : PID du processus
 */
pid_t pidProcessus(processusArriere *listeProcessus, int idProcessus);

/**
 * @brief Obtenir l'identifiant minishell d'un processus à partir de son PID.
 * 
 * @param listeProcessus Liste de processus
 * @param pidProcessus PID du processus
 * @return int : Identifiant minishell du processus
 */
int idProcessus(processusArriere *listeProcessus, pid_t pidProcessus);

/**
 * @brief Afficher la liste des processus lancés au shell.
 * 
 * @param listeProcessus Liste de processus à afficher
 */
void listeProcessus(processusArriere *listeProcessus); 

/**
 * @brief Retourne la commande du processus à mettre au premier plan à partir de son PID.
 * 
 * @param listeProcessus Liste de processus
 * @param pidProcessus PID du processus dont on veut la commande
 * @return char* Commande du processus
 */
char *commandeProcessus(processusArriere *listeProcessus, pid_t pidProcessus);

/**
 * @brief Arrête tous les processus de la liste de processus.
 * 
 * @param listeProcessus Liste de processus
 */
void liberer(processusArriere *listeProcessus);

#endif
